"use strict";(()=>{var e={};e.id=9436,e.ids=[9436],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78893:e=>{e.exports=require("buffer")},84770:e=>{e.exports=require("crypto")},76162:e=>{e.exports=require("stream")},21764:e=>{e.exports=require("util")},96226:(e,r,s)=>{s.r(r),s.d(r,{originalPathname:()=>h,patchFetch:()=>x,requestAsyncStorage:()=>m,routeModule:()=>c,serverHooks:()=>f,staticGenerationAsyncStorage:()=>w});var t={};s.r(t),s.d(t,{POST:()=>d});var a=s(73278),o=s(45002),n=s(54877),i=s(71309),l=s(53524),u=s(16910);let p=new l.PrismaClient;async function d(e){try{let{token:r,newPassword:s}=await e.json();if(!r||!s)return i.NextResponse.json({error:"Token and new password are required"},{status:400});if(s.length<8)return i.NextResponse.json({error:"Password must be at least 8 characters long"},{status:400});let t=await p.user.findFirst({where:{passwordResetToken:r,passwordResetExpires:{gt:new Date}}});if(!t)return i.NextResponse.json({error:"Invalid or expired reset token"},{status:400});let a=await (0,u.c_)(s);return await p.user.update({where:{id:t.id},data:{password:a,passwordResetToken:null,passwordResetExpires:null}}),i.NextResponse.json({success:!0,message:"Password has been reset successfully"})}catch(e){return console.error("Reset password error:",e),i.NextResponse.json({error:"Failed to reset password"},{status:500})}}let c=new a.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/auth/reset-password/route",pathname:"/api/auth/reset-password",filename:"route",bundlePath:"app/api/auth/reset-password/route"},resolvedPagePath:"/workspace/app/api/auth/reset-password/route.ts",nextConfigOutput:"",userland:t}),{requestAsyncStorage:m,staticGenerationAsyncStorage:w,serverHooks:f}=c,h="/api/auth/reset-password/route";function x(){return(0,n.patchFetch)({serverHooks:f,staticGenerationAsyncStorage:w})}},16910:(e,r,s)=>{s.d(r,{Gv:()=>i,RA:()=>l,So:()=>u,c_:()=>n});var t=s(67390),a=s(93981);let o=new(s(53524)).PrismaClient,n=async e=>await a.vp(e,12),i=async(e,r)=>await a.qu(e,r),l=e=>{let r=process.env.JWT_SECRET||"fallback-secret-key";return t.sign({id:e.id,employeeId:e.employeeId,firstName:e.firstName,lastName:e.lastName,email:e.email,role:e.role,department:e.department},r,{expiresIn:"7d"})},u=async(e,r)=>{try{console.log(`🔍 Authentication attempt for Employee ID: ${e}`);let s=await o.user.findUnique({where:{employeeId:e},include:{role:!0,department:!0}});if(!s)return console.log(`❌ User not found for Employee ID: ${e}`),null;if(!s.password)return console.log(`❌ User ${e} has no password set`),null;console.log(`✅ User found: ${s.firstName} ${s.lastName} (${s.employeeId})`),console.log(`✅ User active: ${s.isActive}`),console.log(`✅ Password hash exists: ${!!s.password}`);let t=await i(r,s.password);if(console.log(`🔑 Password validation result: ${t}`),!t)return console.log(`❌ Invalid password for user: ${e}`),null;if(!s.isActive)return console.log(`❌ User ${e} is not active`),null;return{id:s.id,employeeId:s.employeeId,firstName:s.firstName,lastName:s.lastName,email:s.email,role:s.role.name,department:s.department?.name||"Unknown",isActive:s.isActive}}catch(e){return console.error("Authentication error:",e),null}}}};var r=require("../../../../webpack-runtime.js");r.C(e);var s=e=>r(r.s=e),t=r.X(0,[7787,4833,5990],()=>s(96226));module.exports=t})();